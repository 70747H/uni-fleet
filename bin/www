const app = require('../src/app')
const http = require('http')
const cluster = require('cluster')
const numCPUs = require('os').cpus().length
const { setupMaster } = require('@socket.io/sticky')
const { setupPrimary } = require('@socket.io/cluster-adapter')

function normalizePort (port) {
  if (typeof port === 'string') return +port
}

const port = normalizePort(process.env.NODE_PORT)

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`)

  const httpServer = http.createServer(app)

  setupMaster(httpServer, { loadBalancingMethod: 'least-connection' })
  setupPrimary({ serialization: 'advanced' })

  httpServer.listen(port, () => console.log(`listening on *:${port}`))

  for (let i = 0; i < numCPUs; i++) {
    cluster.fork()
  }

  cluster.on('exit', (worker) => {
    console.log(`Worker ${worker.process.pid} died`)
    cluster.fork()
  })
} else {
  console.log(`Worker ${process.pid} started`)

  const httpServer = http.createServer(app)

  const io = require('../src/sockets/index')(httpServer)

  httpServer.listen()
}

